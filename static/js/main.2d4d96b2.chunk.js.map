{"version":3,"sources":["api/consts.ts","api/api.ts","components/CardStats/CardStats.tsx","components/CardStats/hooks/useCardStats.ts","components/CardsFilterSelect/CardsFilterSelect.tsx","components/mockData.typedefs.ts","components/helpers/helpers.ts","components/Card/CharaterCard.tsx","components/CardsList/CardsList.tsx","App.tsx","hooks/useCards.ts","hooks/useFilters.ts","index.tsx"],"names":["CHARACTER","getData","url","fetch","concat","then","response","json","getMoreCharacters","pageNumber","CardStats","_ref","selectedId","onClose","_useCardStats","options","_useState","useState","_useState2","_slicedToArray","character","setCharacter","_useState3","_useState4","lastEpisode","setLastEpisode","getStats","useCallback","_asyncToGenerator","_regeneratorRuntime","mark","_callee","stat","wrap","_context","prev","next","id","sent","t0","Error","stop","useEffect","episode","length","data","name","useCardStats","_jsxs","_Fragment","children","_jsx","type","className","onClick","src","image","alt","gender","species","origin","Oval","color","height","width","CardsFilterSelect","selectedFilters","onChange","placeholder","filters","setOptions","map","value","label","Select","isMulti","event","SPECIES_CARD","STATUS_CARD","GENRES_CARD","isIncludes","array","string","some","element","includes","Card","props","card","status","classNames","characterCard__status_red","characterCard__status_gray","CardsList","cards","App","setSelectedId","_useCards","isLoading","setIsLoading","setCards","_useState5","_useState6","setPageNumber","getMoreData","newCards","results","finish","handleLoad","currentPageNumber","newPageNumber","prevData","_toConsumableArray","useCards","_useFilters","selectedSpecies","setSelectedSpecies","selectedStatus","setSelectedStatus","selectedGenders","setSelectedGenders","preparedCards","useMemo","preparedSpecies","filter","preparedGenders","preparedStatus","isFilterChosen","isGenderChosen","isStatusChosen","useFilters","filterBySpecies","filterByStatus","filterByGenres","wrapperClass","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d4d96b2.chunk.js","sourcesContent":["export const BASE_URL = 'https://rickandmortyapi.com/api/';\nexport const CHARACTER = 'character';\n","import { CardType, CharacterCards } from '../components/types';\nimport { BASE_URL, CHARACTER } from './consts';\n\nexport const getData = (url: string) => (\n  fetch(`${BASE_URL}/${url}`)\n    .then(response => response.json())\n);\n\nexport const get = (url: string) => (\n  fetch(url)\n    .then(response => response.json())\n);\n\nexport const getMoreCharacters = (\n  pageNumber: number,\n): Promise<CharacterCards> => (\n  getData(`${CHARACTER}/?page=${pageNumber}`)\n);\n\nexport const getSelectedCharacter = (id: number): Promise<CardType> => (\n  getData(`${CHARACTER}/${id}`)\n);\n","import React from 'react';\nimport { Oval } from 'react-loader-spinner';\nimport './CardStats.scss';\nimport { useCardStats } from './hooks/useCardStats';\n\ntype Props = {\n  selectedId: number;\n  onClose: () => void;\n};\n\nexport const CardStats: React.FC<Props> = ({\n  selectedId,\n  onClose,\n}) => {\n  const { character, lastEpisode } = useCardStats({ selectedId });\n\n  if (!character) {\n    return (\n      <div className=\"characterStats__content\">\n        <Oval\n          color=\"#000\"\n          height={150}\n          width={150}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n      <button\n        type=\"button\"\n        className=\"blur\"\n        onClick={onClose}\n      />\n\n      <div className=\"characterStats__content\">\n\n        <button\n          type=\"button\"\n          className=\"characterStats__closeBtn\"\n          onClick={onClose}\n        >\n          X\n        </button>\n\n        <img\n          className=\"characterStats__img\"\n          src={`${character.image}`}\n          alt={`${character.name}`}\n        />\n\n        <div className=\"characterStats__content__name\">\n          {character.name}\n        </div>\n\n        <table className=\"characterStats\">\n          <tbody>\n            <tr>\n              <td className=\"characterStats__name\">\n                <span className=\"characterStats__info\">\n                  Gender:\n                  {' '}\n                  {character.gender}\n                </span>\n              </td>\n\n              <td className=\"characterStats__stat\">\n                <span className=\"characterStats__info\">\n                  Species:\n                  {' '}\n                  {character.species}\n                </span>\n              </td>\n\n              <td className=\"characterStats__stat\">\n                <span className=\"characterStats__info\">\n                  Location:\n                  {' '}\n                  {character.origin.name}\n                </span>\n              </td>\n\n              {lastEpisode && (\n                <td className=\"characterStats__stat\">\n                  <span className=\"characterStats__info\">\n                    Last episode:\n                    {' '}\n                    {lastEpisode}\n                  </span>\n                </td>\n              )}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { CardType } from '../../types';\nimport { getSelectedCharacter } from '../../../api/api';\n\ninterface Options {\n  selectedId: number;\n}\n\nexport const useCardStats = (options: Options) => {\n  const { selectedId } = options;\n\n  const [character, setCharacter] = useState<CardType | null>(null);\n  const [lastEpisode, setLastEpisode] = useState('');\n\n  const getStats = useCallback(async () => {\n    try {\n      const stat = await getSelectedCharacter(selectedId);\n\n      setCharacter(stat);\n    } catch {\n      throw new Error('can\\'t get stats');\n    }\n  }, []);\n\n  useEffect(() => {\n    getStats();\n\n    if (character?.episode) {\n      fetch(character?.episode[character?.episode.length - 1])\n        .then(data => data.json())\n        .then(data => setLastEpisode(data.name));\n    }\n  }, [selectedId]);\n\n  return {\n    lastEpisode,\n    character,\n  };\n};\n","import React, { useEffect, useState } from 'react';\nimport Select, { MultiValue } from 'react-select';\nimport { ReactSelectOption } from '../types';\n\ninterface Props {\n  selectedFilters: MultiValue<ReactSelectOption<string>>;\n  onChange: (filters: MultiValue<ReactSelectOption<string>>) => void;\n  placeholder: string;\n  filters: string[];\n}\n\nexport const CardsFilterSelect: React.FC<Props> = ({\n  selectedFilters,\n  onChange,\n  placeholder,\n  filters,\n}) => {\n  const [\n    options,\n    setOptions,\n  ] = useState<MultiValue<ReactSelectOption<string>>>([]);\n\n  useEffect(() => {\n    setOptions(filters.map(type => ({\n      value: type,\n      label: type,\n    })));\n  }, []);\n\n  return (\n    <div className=\"App__filters\">\n      <Select\n        options={options}\n        isMulti\n        value={selectedFilters}\n        onChange={(event) => onChange(event)}\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n","export const SPECIES_CARD = [\n  'Human', 'Alien', 'Humanoid',\n  'Poopybutthole', 'Mythological', 'Unknown',\n  'Animal', 'Disease', 'Robot', 'Cronenberg', 'Planet',\n];\n\nexport const STATUS_CARD = ['Alive', 'Dead', 'Unknown'];\n\nexport const GENRES_CARD = ['Female', 'Male', 'Genderless', 'Unknown'];\n","export const isIncludes = (array: string[], string: string) => {\n  return array.some(element => element.includes(string));\n};\n","import React from 'react';\nimport classNames from 'classnames';\nimport { CardType } from '../types';\nimport './CharaterCard.scss';\n\ninterface Props {\n  card: CardType;\n}\n\nexport const Card: React.FC<Props> = (props) => {\n  const { card } = props;\n  const {\n    image,\n    origin,\n    name,\n    status,\n  } = card;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          <img\n            className=\"characterCard__img\"\n            src={image}\n            alt={card.name}\n          />\n\n          <div className={classNames('characterCard__status',\n            { characterCard__status_red: status === 'Dead' },\n            { characterCard__status_gray: status === 'unknown' })}\n          >\n            {status}\n          </div>\n        </figure>\n      </div>\n\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\" />\n          <div className=\"media-content\">\n            <p className=\"title is-4\">{name}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          <div className=\"characterCard__location\">\n            <span className=\"characterCard__location-title\">\n              Location:\n            </span>\n\n            {` ${origin.name}`}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport { CardType } from '../types';\nimport { Card } from '../Card/CharaterCard';\nimport './CardsList.scss';\n\ntype Props = {\n  onChange: (id: number | null) => void;\n  cards: CardType[];\n};\n\nexport const CardsList: React.FC<Props> = ({\n  cards,\n  onChange,\n}) => {\n  return (\n    <div className=\"characterList\">\n      {cards.map(card => (\n        // eslint-disable-next-line react/button-has-type\n        <button\n          className=\"characterCard\"\n          key={card.id}\n          onClick={() => onChange(card.id)}\n        >\n          <Card card={card} />\n        </button>\n      ))}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { Oval } from 'react-loader-spinner';\nimport { CardStats } from './components/CardStats/CardStats';\nimport {\n  CardsFilterSelect,\n} from './components/CardsFilterSelect/CardsFilterSelect';\nimport {\n  GENRES_CARD as filterByGenres,\n  STATUS_CARD as filterByStatus,\n  SPECIES_CARD as filterBySpecies,\n} from './components/mockData.typedefs';\nimport { useCards } from './hooks/useCards';\nimport { useFilters } from './hooks/useFilters';\nimport { CardsList } from './components/CardsList/CardsList';\n\nexport const App: React.FC = () => {\n  const [selectedId, setSelectedId] = useState<number | null>(null);\n\n  const { isLoading, handleLoad, cards } = useCards();\n  const {\n    preparedCards,\n    selectedFilters,\n    selectedStatus,\n    selectedGenders,\n    setSelectedStatus,\n    setSelectedGenders,\n    setSelectedSpecies,\n  } = useFilters({ cards });\n\n  return (\n    <div className=\"App__wrapper\">\n      <div className=\"App__CharacterFilters\">\n        <CardsFilterSelect\n          selectedFilters={selectedFilters}\n          onChange={setSelectedSpecies}\n          filters={filterBySpecies}\n          placeholder=\"Select species\"\n        />\n\n        <CardsFilterSelect\n          selectedFilters={selectedStatus}\n          onChange={setSelectedStatus}\n          filters={filterByStatus}\n          placeholder=\"Select status\"\n        />\n\n        <CardsFilterSelect\n          selectedFilters={selectedGenders}\n          onChange={setSelectedGenders}\n          filters={filterByGenres}\n          placeholder=\"Select genders\"\n        />\n      </div>\n\n      {!isLoading && !preparedCards.length && (\n        <h2 className=\"App__noCharacters\">\n          Have not characters\n        </h2>\n      )}\n\n      <CardsList\n        onChange={setSelectedId}\n        cards={preparedCards}\n      />\n\n      {isLoading && !preparedCards.length && (\n        <Oval\n          color=\"#000\"\n          wrapperClass=\"App__loader\"\n          height={150}\n          width={150}\n        />\n      )}\n\n      {selectedId && (\n        <CardStats\n          selectedId={selectedId}\n          onClose={() => setSelectedId(null)}\n        />\n      )}\n\n      <button\n        className=\"button is-fullwidth\"\n        type=\"button\"\n        onClick={handleLoad}\n        disabled={isLoading}\n      >\n        Load more\n      </button>\n    </div>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { getMoreCharacters } from '../api/api';\nimport { CardType } from '../components/types';\n\nexport const useCards = () => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [cards, setCards] = useState<CardType[]>([]);\n  const [pageNumber, setPageNumber] = useState<number>(1);\n\n  const getMoreData = useCallback(async () => {\n    setIsLoading(true);\n\n    try {\n      const newCards = await getMoreCharacters(pageNumber);\n\n      setCards(newCards.results);\n    } catch (e) {\n      throw new Error('Something went wrong with loading more cards');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const handleLoad = useCallback(() => {\n    setIsLoading(true);\n\n    setPageNumber(currentPageNumber => {\n      const newPageNumber = currentPageNumber + 1;\n\n      getMoreCharacters(newPageNumber)\n        .then(data => {\n          setCards(prevData => [...prevData, ...data.results]);\n          setIsLoading(false);\n        });\n\n      return newPageNumber;\n    });\n  }, []);\n\n  useEffect(() => {\n    getMoreData();\n  }, []);\n\n  return {\n    isLoading,\n    cards,\n    handleLoad,\n  };\n};\n","import { useMemo, useState } from 'react';\nimport { MultiValue } from 'react-select';\nimport { CardType, ReactSelectOption } from '../components/types';\nimport { isIncludes } from '../components/helpers/helpers';\n\ninterface Options {\n  cards: CardType[];\n}\n\nexport const useFilters = (options: Options) => {\n  const { cards } = options;\n  const [\n    selectedSpecies,\n    setSelectedSpecies,\n  ] = useState<MultiValue<ReactSelectOption<string>>>([]);\n  const [\n    selectedStatus,\n    setSelectedStatus,\n  ] = useState<MultiValue<ReactSelectOption<string>>>([]);\n  const [\n    selectedGenders,\n    setSelectedGenders,\n  ] = useState<MultiValue<ReactSelectOption<string>>>([]);\n\n  const preparedCards = useMemo(() => {\n    const preparedSpecies = selectedSpecies.map(filter => filter.value);\n    const preparedGenders = selectedGenders.map(filter => filter.value);\n    const preparedStatus = selectedStatus.map(filter => filter.value);\n\n    const filterBySpecies = cards.filter(character => {\n      const { species, gender, status } = character;\n\n      const isFilterChosen = preparedSpecies.length\n        ? isIncludes(preparedSpecies, species)\n        : true;\n\n      const isGenderChosen = preparedGenders.length\n        ? isIncludes(preparedGenders, gender)\n        : true;\n\n      const isStatusChosen = preparedStatus.length\n        ? isIncludes(preparedStatus, status)\n        : true;\n\n      return isFilterChosen && isGenderChosen && isStatusChosen;\n    });\n\n    return filterBySpecies;\n  }, [selectedSpecies, cards, selectedStatus, selectedGenders]);\n\n  return {\n    preparedCards,\n    selectedFilters: selectedSpecies,\n    selectedStatus,\n    selectedGenders,\n    setSelectedSpecies,\n    setSelectedStatus,\n    setSelectedGenders,\n  };\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\nimport 'bulma/css/bulma.css';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}